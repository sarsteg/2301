---
git---
title: "Data Management"
format: 
  html: 
    self-contained: true
    toc: true             
  pdf: 
    number-sections: true 
    toc: true            
    pdf-engine: xelatex   
editor: visual
---

## Introduction

**Goal:**

-   Create an organized dataset that focuses on my variables of interests.

-   Create additional variables that I will need to analyze.

**Dataset:** International Multi-Centre Study of Statistics and Mathematics Anxieties and Related Variables in University Students (the SMARVUS Dataset)

**Source:** "This large, international dataset contains survey responses from N = 12,570 students from 100 universities in 35 countries, collected in 21 languages. We measured anxieties (statistics, mathematics, test, trait, social interaction, performance, creativity, intolerance of uncertainty, and fear of negative evaluation), self-efficacy, persistence, and the cognitive reflection test, and collected demographics, previous mathematics grades, self-reported and official statistics grades, and statistics module details. Data reuse potential is broad, including testing links between anxieties and statistics/mathematics education factors, and examining instrumentsâ€™ psychometric properties across different languages and contexts." (<https://osf.io/mhg94/>)

**Variables of Interest:**

-   'Var1': \[Variable description\]

-   'Var2': \[Variable description\]

Goals:

-   Filter dataset to English speakers (my language) and Psychology Majors (majority of participants).

-   Create total scores for measures.

-   Create a new file with my filthred data.

```{r load-libraries, echo=FALSE, warning=FALSE}
library(tidyverse)
library(descr)
library(knitr)
library(dplyr)
library(quarto)
library(tidyr)
library(gt)
```

```{r load-data-from-script}
#| message: false
source("loadData.R")
```

```{r}
head(df)
```

```{r code-read-data}
# Alternative example

# Define the file path
# Load the CSV file
#df <- file.path("..", "data", "data.csv") %>%
#  read_csv()

# View the first few rows
#head(df)
```

## Filtering Data

### Check data prior to filtering

Review the majors and minors of participants. I will use this information to be aware of the levels of the variable when filtering.

```{r}
freq(as.ordered(df$degree_major), plot = FALSE)
```

```{r}
freq(as.ordered(df$degree_minor), plot = FALSE)
```

```{r}
freq(as.ordered(df$language), plot = 0)
```

```{r}
freq(as.ordered(df$attention_amnesty), plot = 0)
```

### Filtering the data

Eliminate any participants that did not pass the attention check items. Participants were directed to provide a particular response to each of the attention check items.

```{r}
filtered_df <- df %>% 
  filter(
    attention_amnesty == "Yes") %>% 
  filter(
    Q7.1_24  == 1, 
    Q8.1_21  == 5, 
    Q9.1_22  == 1, 
    Q11.1_9  == 3, 
    Q13.1_17 == 2, 
    Q15.1_9  == 4) %>% 
  filter(
    degree_major == "Psychology" | 
    degree_minor == "Psychology") %>% 
  filter(
    progress == 100) %>%  
  filter(
    language == "English")
  
```

```{r}
#View(filtered_df)
```

### Check data after filtering

Use frequency tables to check filtered data.

```{r}
attention_check_items <- c(
  "Q7.1_24", 
  "Q8.1_21", 
  "Q9.1_22", 
  "Q11.1_9", 
  "Q13.1_17", 
  "Q15.1_9"
  )

# Generate frequency tables for each variable
invisible(lapply(attention_check_items, function(var) {
  cat("\n-----------------------------\n")  
  cat("Frequency Table for", var, "\n") 
  print(table(filtered_df[[var]]))
}))
```

```{r}
freq(as.ordered(filtered_df$attention_amnesty), plot = 0)
```

```{r}
freq(as.ordered(filtered_df$degree_major), plot = 0)
```

```{r}
freq(as.ordered(filtered_df$degree_minor), plot = 0)
```

```{r}
freq(as.ordered(filtered_df$progress), plot = 0)
```

```{r}
freq(as.ordered(filtered_df$language), plot = 0)
```

### Drop variables

Remove variables that have be used in the filter and are no longer meaningful to include.

```{r}
filtered_df <- filtered_df %>% 
  select(
    -Q7.1_24, 
    -Q8.1_21, 
    -Q9.1_22, 
    -Q11.1_9, 
    -Q13.1_17, 
    -Q15.1_9,
    -attention_amnesty, 
    -degree_major, 
    -degree_minor, 
    -language,
    -progress) 
```

```{r}
#View(filtered_df)
```

## Addressing Missing Values

```{r missing-values}
#| include: false
# Count the number of missing values per column
colSums(is.na(filtered_df %>% select(Q7.1_1:Q17.3)))
```

Missing values do not appear to be an issue for the scale variables.

## Creating Total Score for Measurements

My dataset contains the individual items on several measures. I will need to create a total score for total scores and sub-scales. Variables appear to be doubles, which will work for creating the total scores and subscales. Output will be hidden below to save space.

```{r}
#| include: false
#Prior to creating the aggregate columns, the variables must be in the correct type.
glimpse(filtered_df)
```

### Anxiety

#### Test Anxiety (worry, emotionality, test-irrelevant thinking)

#### STICSA trait anxiety

#### Social performance anxiety

#### creativity anxiety

### Self-Evaluation

#### Self efficacy

#### Persistence

#### Intolerance of uncertainty

#### Fear of negative evaluation

#### Cognitive reflection

### STARS

#### STARS original

#### STARS math

### R-MARS

#### R-MARS stats

#### R-MARS original
