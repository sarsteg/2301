---
title: "Working with Data"
format: 
  html: 
    self-contained: true
editor: visual
---

# Working with Data

**Goals:**

-   Begin exploratory data analysis and become more familiar with the dataset.

Dataset: \[Name of the Data that you are using\]

Source: \[Briefy describe the source of your data\]

Variables of Interest:

-   'Var1': \[Variable description\]

-   'Var2': \[Variable description\]

## Folder organization

Save your data file in **two** folder locations:

-   /data/raw

-   renamed file "data" in /data folder

For example, if data was called "survey1990-1992.csv", I would upload the file to the /data/raw folder as is. Then, in the 'File' tab, I could select the file and click 'Copy To...' in the 'More' settings. Navigate to the /data folder, and rename the file to be "data.csv". Keep your file type (e.g., .csv) in the name.

## File setup

### Install the required packages.

```{r install.packages}
# install.packages("tidyverse")
# install.packages("descr")
# install.packages("knitr")
# install.packages("dplyr")
```

### Load the required packages.

```{r load-packages}
#| include: false
library(tidyverse)  # For data manipulation and tibbles
library(descr) # For frequency tables
library(knitr) # For combining information, like tables with headers
library(dplyr) # For additional functions
library(lsr)
library(psych)
```

```{r}
# Packages for SAS, SPSS, and Stata
library(haven)
library(labelled)
```

### Settings for R chunks

```{r suppressing-messages}
suppressPackageStartupMessages(library(tidyverse))
```

*Hide messages with\
#\| echo: false\
or use the suppress function above.*

### Load data file into path and read csv file.

```{r load-data}
# Define the file path (going up one level from /scripts to the main directory)
file_path <- file.path("..", "data", "data.csv")

# Load the CSV file into a dataframe (automatically a tibble)
df <- read_csv(file_path)

# View the first few rows
head(df)

```

```{r}
# SPSS files can make a codebook from their file
# codebook <- look_for(df)
```

## View data

Check the data after it has been loaded.

### Check the column names.

```{r}
names(df)
```

```{r colnames}
# Check column names
colnames(df)

```

### View summary statistics

```{r}
summary(df)
```

```{r}
#| message: false
#| warning: false
# Useful for interval or ratio scale variables
# Think carefully about what the numbers *actually* mean for your variables
psych::describe(df)
```

```{r}
psych::describeBy(df$age, group = df$gender)
```

### Check the variable types.

```{r glimpse}
# Check data structure
glimpse(df)
```

## Create Frequency Tables

Use descr package to create frequency tables.

### Country

```{r freq-country}
# Frequency table for country where data was collected
freq(as.ordered(df$country), plot = FALSE)
```

**Interpretation:** While I am from the US, the sample size from the US is small. I will likely use country as an additional variable or limit the analyses to certain countries (TBD based on additional exploration).

### Language

```{r freq-language}
# Frequency table for language spoken for participants
freq(as.ordered(df$language), plot = FALSE)
```

**Interpretation:** There is a large sample of English speakers. I will focus my analyses on English speakers since English is my primary language. From my readings, I know that language can influence individuals processing of math. This limitation to English speakers will help focus my analysis and eliminate variation due to language.

### Degree Major

```{r freq-degree-major}
# Frequency table for country where data was collected
freq(as.ordered(df$degree_major), plot = FALSE)
```

**Interpretation:** Most of participants were psychology majors. I would like to focus my analyses on psychology majors since this is a Statistics class for psychology majors.

------------------------------------------------------------------------

## Extra Additional Table

Choosing one additional variable to format differently.

```{r}
# Create the data for the table
genderTable <- as.data.frame(freq(as.ordered(df$gender), plot = FALSE))

genderTable
```

```{r}
# Create columns for new table
colnames(genderTable)
```

## Variable divided into multiple variables

### Multiple sections? or one selection?

```{r}
# Create a list of the software columns
softwareColumns <- c(
  "software_excel",
  "software_jamovi",
  "software_jasp",
  "software_r",
  "software_sas",
  "software_spss_amos",
  "software_spss_stats",
  "software_none",
  "software_other"
  )
  
# Create column for # of NAs 
df$softwareNAs <- rowSums(!is.na(df[softwareColumns]))

# Check if if the number of NAs is consistent
freq(as.ordered(df$softwareNAs), plot = FALSE)
```

There appears to be multiple selections allowed. Instead, I can focus on if statistical software was taught.

```{r}
# Check if the topic of software was taught
freq(as.ordered(df$topic_software), plot = FALSE)
```

### Another option: coalesce()

```{r}
# Check how the variables are organized
freq(as.ordered(df$software_excel), plot = FALSE)
```

The coalesce() function from the dplyr package is the most elegant and efficient way to handle this, if I would be only looking for the first non-missing value from a set of vectors.

```{r}
# Create a new variable that will hold the non-NA values
df$software <- coalesce(
  df$software_excel,
  df$software_jamovi,
  df$software_jasp,
  df$software_r,
  df$software_sas,
  df$software_spss_amos,
  df$software_spss_stats,
  df$software_none,
  df$software_other,
  )

# NA is not meaningful in the case, so NAs will be dropped

```

```{r}
# Create a freq table for this new variable
freq(as.ordered(df$software), plot = FALSE)
```

*Number for excel matches frequency table above. Possible issues with selecting multiple options.*

### 
